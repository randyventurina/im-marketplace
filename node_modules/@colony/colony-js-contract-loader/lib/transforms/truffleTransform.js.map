{"version":3,"sources":["../../src/transforms/truffleTransform.js"],"names":["truffleTransform","abi","bytecode","networks","network","address","networkKeys","Object","keys","map","id","length","Error"],"mappings":";;;;;kBAcwBA,gB;AAAT,SAASA,gBAAT,GAGb;AAAA,iFAFyD,EAEzD;AAAA,sBAFEC,GAEF;AAAA,MAFEA,GAEF,4BAFQ,EAER;AAAA,MAFYC,QAEZ,QAFYA,QAEZ;AAAA,2BAFsBC,QAEtB;AAAA,MAFsBA,QAEtB,iCAFiC,EAEjC;;AAAA,kFADqB,EACrB;AAAA,MADEC,OACF,SADEA,OACF;;AACA,MAAIC,gBAAJ;;AAEA;AACA,MAAMC,cAAcC,OAAOC,IAAP,CAAYL,QAAZ,EAAsBM,GAAtB,CAA0B;AAAA,gBAASC,EAAT;AAAA,GAA1B,CAApB;;AAEA,MAAIN,WAAWE,YAAYK,MAA3B,EAAmC;AACjC,QAAI,CAACR,SAASC,OAAT,CAAL,EACE,MAAM,IAAIQ,KAAJ,iBAAwBR,OAAxB,4BAAN;AACCC,WAH8B,GAGlBF,SAASC,OAAT,CAHkB,CAG9BC,OAH8B;AAIlC,GAJD,MAIO;AAAA,gBAEUF,SAASG,YAAYA,YAAYK,MAAZ,GAAqB,CAAjC,CAAT,KAAiD,EAF3D;AACL;;;AACGN,WAFE,SAEFA,OAFE;AAGN;;AAED,SAAO;AACLJ,YADK;AAELI,oBAFK;AAGLH;AAHK,GAAP;AAKD","file":"truffleTransform.js","sourcesContent":["/* @flow */\n\nimport type { Query } from '../interface/ContractLoader';\n\ntype TruffleArtifact = {\n  abi: Array<{}>,\n  bytecode: string,\n  networks: {\n    [network: string | number]: {\n      address: string,\n    },\n  },\n};\n\nexport default function truffleTransform(\n  { abi = [], bytecode, networks = {} }: TruffleArtifact = {},\n  { network }: Query = {},\n) {\n  let address;\n\n  // Some clients (like Ganache) create IDs as integers; normalise them\n  const networkKeys = Object.keys(networks).map(id => `${id}`);\n\n  if (network && networkKeys.length) {\n    if (!networks[network])\n      throw new Error(`Network ID ${network} not found in contract`);\n    ({ address } = networks[network]);\n  } else {\n    // Pick the last network (assumed to be the most recent)\n    ({ address } = networks[networkKeys[networkKeys.length - 1]] || {});\n  }\n\n  return {\n    abi,\n    address,\n    bytecode,\n  };\n}\n"]}