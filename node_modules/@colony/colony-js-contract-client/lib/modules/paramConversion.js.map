{"version":3,"sources":["../../src/modules/paramConversion.js"],"names":["convertInputValues","convertOutputValues","inputValues","valuesSpec","map","paramName","paramType","defaultValue","Object","hasOwnProperty","call","outputValues","length","name","type","reduce","acc","value","assign"],"mappings":";;;;;;;;;;;;;;QASgBA,kB,GAAAA,kB;QAmBAC,mB,GAAAA,mB;;AA3BhB;;;;AAGA;;;;;AAKO,SAASD,kBAAT,CACLE,WADK,EAELC,UAFK,EAGL;AACA,SAAOA,WAAWC,GAAX,CAAe;AAAA;AAAA,QAAEC,SAAF;AAAA,QAAaC,SAAb;AAAA,QAAwBC,YAAxB;;AAAA,WACpB,mCACEC,OAAOC,cAAP,CAAsBC,IAAtB,CAA2BR,WAA3B,EAAwCG,SAAxC,IACIH,YAAYG,SAAZ,CADJ,GAEIE,YAHN,EAIED,SAJF,CADoB;AAAA,GAAf,CAAP;AAQD;;AAED;;;;;;AAKO,SAASL,mBAAT,CACLU,YADK,EAELR,UAFK,EAGQ;AACb,SAAOA,cAAcA,WAAWS,MAAzB,GACH;AACAT,aACGC,GADH,CACO;AAAA;AAAA,QAAES,IAAF;AAAA,QAAQC,IAAR;;AAAA,WAAkB,CACrBD,IADqB,EAErB,oCAAmBF,aAAaE,IAAb,CAAnB,EAAuCC,IAAvC,CAFqB,CAAlB;AAAA,GADP,EAKGC,MALH,CAMI,UAACC,GAAD;AAAA;AAAA,QAAOH,IAAP;AAAA,QAAaI,KAAb;;AAAA,WAAwBT,OAAOU,MAAP,CAAcF,GAAd,oCAAsBH,IAAtB,EAA6BI,KAA7B,EAAxB;AAAA,GANJ,EAOI,EAPJ,CAFG,GAWH;AACAN,cAZJ;AAaD","file":"paramConversion.js","sourcesContent":["// @flow\nimport { convertInputValue, convertOutputValue } from './paramTypes';\nimport type { Params } from '../flowtypes';\n\n/**\n * Given input values for a contract method call, as well as their type\n * specifications, generate a list of parameters that contains the encoded\n * parameters.\n */\nexport function convertInputValues<InputTypes: Object>(\n  inputValues: InputTypes,\n  valuesSpec: Params,\n) {\n  return valuesSpec.map(([paramName, paramType, defaultValue]) =>\n    convertInputValue(\n      Object.hasOwnProperty.call(inputValues, paramName)\n        ? inputValues[paramName]\n        : defaultValue,\n      paramType,\n    ),\n  );\n}\n\n/**\n * Given output values of a contract method call or a contract event, as well as\n * their type specifications, generate an object that consists of the converted\n * values with their respective types.\n */\nexport function convertOutputValues<OutputTypes: Object>(\n  outputValues: { [string | number]: any },\n  valuesSpec: Params,\n): OutputTypes {\n  return valuesSpec && valuesSpec.length\n    ? // $FlowFixMe\n      valuesSpec\n        .map(([name, type]) => [\n          name,\n          convertOutputValue(outputValues[name], type),\n        ])\n        .reduce(\n          (acc, [name, value]) => Object.assign(acc, { [name]: value }),\n          {},\n        )\n    : // $FlowFixMe\n      outputValues;\n}\n"]}