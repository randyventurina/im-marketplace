{"version":3,"sources":["../src/paramTypes.js"],"names":["roleType","roles","validate","value","Object","hasOwnProperty","call","convertInput","convertOutput","roleNumber","toNumber","keys","find","name"],"mappings":";;AAEA;;AAKA;;AAEA;;AAEA,IAAMA,WAAW,SAAXA,QAAW,CAACC,KAAD;AAAA,SAA4C;AAC3DC,YAD2D,oBAClDC,KADkD,EACtC;AACnB,aAAOC,OAAOC,cAAP,CAAsBC,IAAtB,CAA2BL,KAA3B,EAAkCE,KAAlC,CAAP;AACD,KAH0D;AAI3DI,gBAJ2D,wBAI9CJ,KAJ8C,EAIlB;AACvC,aAAOF,MAAME,KAAN,CAAP;AACD,KAN0D;AAO3DK,iBAP2D,yBAO7CL,KAP6C,EAOjC;AACxB,UAAMM,aAAa,gCAAYN,KAAZ,IAAqBA,MAAMO,QAAN,EAArB,GAAwCP,KAA3D;AACA,aAAOC,OAAOO,IAAP,CAAYV,KAAZ,EAAmBW,IAAnB,CAAwB;AAAA,eAAQX,MAAMY,IAAN,MAAgBJ,UAAxB;AAAA,OAAxB,KAA+D,IAAtE;AACD;AAV0D,GAA5C;AAAA,CAAjB;;AAaA,0CAAa,MAAb,EAAqBT,0BAArB;;AAEA,0CAAa,eAAb,EAA8BA,oCAA9B;;AAEA;AACA;AACA,0CAAa,gBAAb,EAA+B;AAC7BE,UAD6B,oBACpBC,KADoB,EACR;AACnB,WAAO,mCAAeA,KAAf,KAAyB,qCAAiBA,KAAjB,CAAhC;AACD,GAH4B;AAI7BI,cAJ6B,wBAIhBJ,KAJgB,EAIJ;AACvB,WAAO,mCAAeA,KAAf,IAAwBA,KAAxB,2BAAP;AACD,GAN4B;AAO7BK,eAP6B,yBAOfL,KAPe,EAOH;AACxB,WAAOA,KAAP;AACD;AAT4B,CAA/B","file":"paramTypes.js","sourcesContent":["/* @flow */\n\nimport {\n  isBigNumber,\n  isValidAddress,\n  isEmptyHexString,\n} from '@colony/colony-js-utils';\nimport { addParamType } from '@colony/colony-js-contract-client';\n\nimport { ROLES, AUTHORITY_ROLES, EMPTY_ADDRESS } from './constants';\n\nconst roleType = (roles: { [roleName: string]: number }) => ({\n  validate(value: any) {\n    return Object.hasOwnProperty.call(roles, value);\n  },\n  convertInput(value: $Keys<typeof roles>) {\n    return roles[value];\n  },\n  convertOutput(value: any) {\n    const roleNumber = isBigNumber(value) ? value.toNumber() : value;\n    return Object.keys(roles).find(name => roles[name] === roleNumber) || null;\n  },\n});\n\naddParamType('role', roleType(ROLES));\n\naddParamType('authorityRole', roleType(AUTHORITY_ROLES));\n\n// Either a valid address, or an empty address to indicate ether\n// (0x0 or 0x0000000000000000000000000000000000000000)\naddParamType('payableAddress', {\n  validate(value: any) {\n    return isValidAddress(value) || isEmptyHexString(value);\n  },\n  convertInput(value: any) {\n    return isValidAddress(value) ? value : EMPTY_ADDRESS;\n  },\n  convertOutput(value: any) {\n    return value;\n  },\n});\n"]}