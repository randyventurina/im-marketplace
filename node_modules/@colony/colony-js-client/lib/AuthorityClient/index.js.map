{"version":3,"sources":["../../src/AuthorityClient/index.js"],"names":["AuthorityClient","user","role","addCaller","input","output","functionName","addSender","contractName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;IAKqBA,e;;;;;;;;;;gDA6CS;AAC1B,UAAMC,OAAO,CAAC,MAAD,EAAS,SAAT,CAAb;AACA,UAAMC,OAAO,CAAC,MAAD,EAAS,eAAT,CAAb;;AAEA,WAAKC,SAAL,CAAe,aAAf,EAA8B;AAC5BC,eAAO,CAACH,IAAD,CADqB;AAE5BI,gBAAQ,CAACH,IAAD,CAFoB;AAG5BI,sBAAc;AAHc,OAA9B;AAKA,WAAKH,SAAL,CAAe,aAAf,EAA8B;AAC5BC,eAAO,CAACH,IAAD,EAAOC,IAAP,CADqB;AAE5BG,gBAAQ,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD;AAFoB,OAA9B;AAIA,WAAKE,SAAL,CAAe,aAAf,EAA8B;AAC5BH,eAAO,CAACH,IAAD,EAAOC,IAAP,EAAa,CAAC,SAAD,EAAY,SAAZ,EAAuB,IAAvB,CAAb;AADqB,OAA9B;AAGD;;;;AAhDD;;;wBA0B0B;AACxB,aAAO;AACLM,sBAAc;AADT,OAAP;AAGD;AAjBD;;;;AAzBA;;;;;;;;kBADmBR,e","file":"index.js","sourcesContent":["/* @flow */\n\nimport ContractClient from '@colony/colony-js-contract-client';\nimport { AUTHORITY_ROLES } from '../constants';\n\ntype Address = string;\ntype AuthorityRole = $Keys<typeof AUTHORITY_ROLES>;\n\nexport default class AuthorityClient extends ContractClient {\n  /*\n  Get the given user's role.\n  */\n  getUserRole: AuthorityClient.Caller<\n    {\n      user: Address, // The user in question.\n    },\n    {\n      role: AuthorityRole, // That user's authority role.\n    },\n    AuthorityClient,\n  >;\n  /*\n  For the given user's address and role, return true if the user has that role.\n  */\n  hasUserRole: AuthorityClient.Caller<\n    {\n      user: Address, // The user in question\n      role: AuthorityRole, // The role to be checked.\n    },\n    {\n      hasRole: boolean, // Whether or not the user has the role provided.\n    },\n    AuthorityClient,\n  >;\n  /*\n  Enable or disable a particular role for a user's address (default behaviour: enable the role).\n  */\n  setUserRole: AuthorityClient.Sender<\n    {\n      user: Address, // The user address to be granted (or stripped of) authority.\n      role: AuthorityRole, // The authority role.\n      enabled?: boolean, // Whether or not that role has been enabled.\n    },\n    {},\n    AuthorityClient,\n  >;\n\n  static get defaultQuery() {\n    return {\n      contractName: 'Authority',\n    };\n  }\n\n  initializeContractMethods() {\n    const user = ['user', 'address'];\n    const role = ['role', 'authorityRole'];\n\n    this.addCaller('getUserRole', {\n      input: [user],\n      output: [role],\n      functionName: 'getUserRoles',\n    });\n    this.addCaller('hasUserRole', {\n      input: [user, role],\n      output: [['hasRole', 'boolean']],\n    });\n    this.addSender('setUserRole', {\n      input: [user, role, ['enabled', 'boolean', true]],\n    });\n  }\n}\n"]}