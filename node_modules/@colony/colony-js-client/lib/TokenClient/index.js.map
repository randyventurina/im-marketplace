{"version":3,"sources":["../../src/TokenClient/index.js"],"names":["TokenClient","amount","sourceAddress","destinationAddress","user","Transfer","contract","handler","to","value","Approval","owner","spender","Mint","guy","wad","address","Burn","Object","assign","LogSetOwner","LogSetAuthority","authority","addCaller","functionName","output","input","addSender","eventHandlers","contractName"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\n\nimport BigNumber from 'bn.js';\nimport ContractClient from '@colony/colony-js-contract-client';\n\ntype Address = string;\n\nexport default class TokenClient extends ContractClient {\n  /*\n  Get the total token supply.\n  */\n  getTotalSupply: TokenClient.Caller<\n    {},\n    {\n      amount: BigNumber, // The total token supply.\n    },\n    TokenClient,\n  >;\n  /*\n  Returns the token balance of a given address.\n  */\n  getBalanceOf: TokenClient.Caller<\n    {\n      sourceAddress: Address, // The address in question.\n    },\n    {\n      amount: BigNumber, // The balance of tokens associated with the address.\n    },\n    TokenClient,\n  >;\n  /*\n  Given a token owner address and a spender, will return the amount of tokens approved by the owner that can be transferred to the spender's account.\n  */\n  getAllowance: TokenClient.Caller<\n    {\n      sourceAddress: Address, // Address of the token owner.\n      user: Address, // Address of the approved spender.\n    },\n    {\n      amount: BigNumber, // The approved amount of tokens the spender may transfer.\n    },\n    TokenClient,\n  >;\n  /*\n  Transfer an amount of tokens from a token owner's account to a specified destination address.\n  */\n  transfer: TokenClient.Sender<\n    {\n      destinationAddress: Address, // The account to recieve the tokens.\n      amount: BigNumber, // The amount to transfer.\n    },\n    {},\n    TokenClient,\n  >;\n  /*\n  Transfer tokens from a specified account to a destination account. Token transfer must have a sufficient balance and `allowance` set by the source account for the destination address.\n  */\n  transferFrom: TokenClient.Sender<\n    {\n      sourceAddress: Address, // 'from' address, or the token owner account.\n      destinationAddress: Address, // 'to' address, or the destination with sufficient ``allowance` for transfer.\n      amount: BigNumber, // Amount to transfer.\n    },\n    {\n      to: Address, // Event data indicating the 'to' address.\n      value: BigNumber, // Event data indicating the amount transferred.\n    },\n    TokenClient,\n  >;\n  /*\n  The owner of a token can approve an `allowance` that a spender is authorized to transfer using the `transferFrom` function.\n  */\n  approve: TokenClient.Sender<\n    {\n      user: Address, // The spending account allowed to transfer tokens with `transferFrom`.\n      amount: BigNumber, // The maximum `allowance` that the spending account may transfer from the owner to the spender.\n    },\n    {\n      owner: Address, // Event data indicating the token owner ('from' address).\n      spender: Address, // Event data indicating the spender (who is given the `allowance`).\n      value: BigNumber, // Event data indicating the new value of allowed transfer.\n    },\n    TokenClient,\n  >;\n  /*\n  ERC20Extended functionality to `mint` new tokens and add to the total supply. In colony these functions are subject to authority restrictions.\n  */\n  mint: TokenClient.Sender<\n    {\n      amount: BigNumber, // The amount of new tokens to mint.\n    },\n    {\n      address: Address, // The address that initiated the mint event.\n      amount: BigNumber, // Event data indicating the amount of tokens minted.\n    },\n    TokenClient,\n  >;\n  /*\n  ERC20Extended functionality to `burn` un-owned tokens and subtract from the total token supply. In colony these functions are subject to authority restrictions.\n  */\n  burn: TokenClient.Sender<\n    {\n      amount: BigNumber, // The amount of unspent tokens to burn.\n    },\n    {\n      address: Address, // The address that initiated the burn event.\n      amount: BigNumber, // Event data indicating the amount burned.\n    },\n    TokenClient,\n  >;\n  /*\n  Sets the owner of a given token contract. In most situations this should be the colony's own address.\n  */\n  setOwner: TokenClient.Sender<\n    {\n      owner: Address, // The address of the new owner.\n    },\n    {\n      owner: Address, // Event data indicating the new owner.\n    },\n    TokenClient,\n  >;\n  /*\n  Give a particular account special authority (admin) within a colony.\n  */\n  setAuthority: TokenClient.Sender<\n    {\n      authority: Address, // The address to be given admin authority.\n    },\n    {\n      authority: Address, // Event data indicating the address given authority.\n    },\n    TokenClient,\n  >;\n\n  static get defaultQuery() {\n    return {\n      contractName: 'Token',\n    };\n  }\n\n  initializeContractMethods() {\n    const amount = ['amount', 'bigNumber'];\n    const sourceAddress = ['sourceAddress', 'address'];\n    const destinationAddress = ['destinationAddress', 'address'];\n    const user = ['user', 'address'];\n\n    const Transfer = {\n      contract: this.contract,\n      handler({ to, value }: { to: Address, value: BigNumber }) {\n        return {\n          to,\n          value,\n        };\n      },\n    };\n    const Approval = {\n      contract: this.contract,\n      handler({\n        owner,\n        spender,\n        value,\n      }: {\n        owner: Address,\n        spender: Address,\n        value: BigNumber,\n      }) {\n        return {\n          owner,\n          spender,\n          value,\n        };\n      },\n    };\n    const Mint = {\n      contract: this.contract,\n      handler({ guy, wad }: { guy: Address, wad: BigNumber }) {\n        return {\n          address: guy,\n          amount: wad,\n        };\n      },\n    };\n    const Burn = Object.assign({}, Mint);\n    const LogSetOwner = {\n      contract: this.contract,\n      handler({ owner }: { owner: Address }) {\n        return {\n          owner,\n        };\n      },\n    };\n    const LogSetAuthority = {\n      contract: this.contract,\n      handler({ authority }: { authority: Address }) {\n        return {\n          authority,\n        };\n      },\n    };\n\n    this.addCaller('getTotalSupply', {\n      functionName: 'totalSupply',\n      output: [amount],\n    });\n\n    this.addCaller('getBalanceOf', {\n      functionName: 'balanceOf',\n      input: [sourceAddress],\n      output: [amount],\n    });\n\n    this.addCaller('getAllowance', {\n      functionName: 'allowance',\n      input: [sourceAddress, user],\n      output: [amount],\n    });\n\n    this.addSender('transfer', {\n      input: [destinationAddress, amount],\n      eventHandlers: { Transfer },\n    });\n\n    this.addSender('transferFrom', {\n      input: [sourceAddress, destinationAddress, amount],\n      eventHandlers: { Transfer },\n    });\n\n    this.addSender('approve', {\n      input: [user, amount],\n      eventHandlers: { Approval },\n    });\n\n    this.addSender('mint', {\n      input: [amount],\n      eventHandlers: { Mint },\n    });\n\n    this.addSender('burn', {\n      input: [amount],\n      eventHandlers: { Burn },\n    });\n\n    this.addSender('setOwner', {\n      input: [['owner', 'address']],\n      eventHandlers: { LogSetOwner },\n    });\n\n    this.addSender('setAuthority', {\n      input: [['authority', 'address']],\n      eventHandlers: { LogSetAuthority },\n    });\n  }\n}\n"]}