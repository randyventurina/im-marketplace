'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _bn = require('bn.js');

var _bn2 = _interopRequireDefault(_bn);

var _colonyJsContractClient = require('@colony/colony-js-contract-client');

var _colonyJsContractClient2 = _interopRequireDefault(_colonyJsContractClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TokenClient = function (_ContractClient) {
  (0, _inherits3.default)(TokenClient, _ContractClient);

  function TokenClient() {
    (0, _classCallCheck3.default)(this, TokenClient);
    return (0, _possibleConstructorReturn3.default)(this, (TokenClient.__proto__ || Object.getPrototypeOf(TokenClient)).apply(this, arguments));
  }

  (0, _createClass3.default)(TokenClient, [{
    key: 'initializeContractMethods',
    value: function initializeContractMethods() {
      var amount = ['amount', 'bigNumber'];
      var sourceAddress = ['sourceAddress', 'address'];
      var destinationAddress = ['destinationAddress', 'address'];
      var user = ['user', 'address'];

      var Transfer = {
        contract: this.contract,
        handler: function handler(_ref) {
          var to = _ref.to,
              value = _ref.value;

          return {
            to: to,
            value: value
          };
        }
      };
      var Approval = {
        contract: this.contract,
        handler: function handler(_ref2) {
          var owner = _ref2.owner,
              spender = _ref2.spender,
              value = _ref2.value;

          return {
            owner: owner,
            spender: spender,
            value: value
          };
        }
      };
      var Mint = {
        contract: this.contract,
        handler: function handler(_ref3) {
          var guy = _ref3.guy,
              wad = _ref3.wad;

          return {
            address: guy,
            amount: wad
          };
        }
      };
      var Burn = Object.assign({}, Mint);
      var LogSetOwner = {
        contract: this.contract,
        handler: function handler(_ref4) {
          var owner = _ref4.owner;

          return {
            owner: owner
          };
        }
      };
      var LogSetAuthority = {
        contract: this.contract,
        handler: function handler(_ref5) {
          var authority = _ref5.authority;

          return {
            authority: authority
          };
        }
      };

      this.addCaller('getTotalSupply', {
        functionName: 'totalSupply',
        output: [amount]
      });

      this.addCaller('getBalanceOf', {
        functionName: 'balanceOf',
        input: [sourceAddress],
        output: [amount]
      });

      this.addCaller('getAllowance', {
        functionName: 'allowance',
        input: [sourceAddress, user],
        output: [amount]
      });

      this.addSender('transfer', {
        input: [destinationAddress, amount],
        eventHandlers: { Transfer: Transfer }
      });

      this.addSender('transferFrom', {
        input: [sourceAddress, destinationAddress, amount],
        eventHandlers: { Transfer: Transfer }
      });

      this.addSender('approve', {
        input: [user, amount],
        eventHandlers: { Approval: Approval }
      });

      this.addSender('mint', {
        input: [amount],
        eventHandlers: { Mint: Mint }
      });

      this.addSender('burn', {
        input: [amount],
        eventHandlers: { Burn: Burn }
      });

      this.addSender('setOwner', {
        input: [['owner', 'address']],
        eventHandlers: { LogSetOwner: LogSetOwner }
      });

      this.addSender('setAuthority', {
        input: [['authority', 'address']],
        eventHandlers: { LogSetAuthority: LogSetAuthority }
      });
    }
  }], [{
    key: 'defaultQuery',

    /*
    Sets the owner of a given token contract. In most situations this should be the colony's own address.
    */

    /*
    ERC20Extended functionality to `mint` new tokens and add to the total supply. In colony these functions are subject to authority restrictions.
    */

    /*
    Transfer tokens from a specified account to a destination account. Token transfer must have a sufficient balance and `allowance` set by the source account for the destination address.
    */

    /*
    Given a token owner address and a spender, will return the amount of tokens approved by the owner that can be transferred to the spender's account.
    */

    /*
    Get the total token supply.
    */
    get: function get() {
      return {
        contractName: 'Token'
      };
    }
    /*
    Give a particular account special authority (admin) within a colony.
    */

    /*
    ERC20Extended functionality to `burn` un-owned tokens and subtract from the total token supply. In colony these functions are subject to authority restrictions.
    */

    /*
    The owner of a token can approve an `allowance` that a spender is authorized to transfer using the `transferFrom` function.
    */

    /*
    Transfer an amount of tokens from a token owner's account to a specified destination address.
    */

    /*
    Returns the token balance of a given address.
    */

  }]);
  return TokenClient;
}(_colonyJsContractClient2.default);

exports.default = TokenClient;
//# sourceMappingURL=index.js.map